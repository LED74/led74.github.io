---
layout: post
title: "Promise"
subtitle: "Promise"
categories: Programming
tags: Javascript
---

# **Javascript ES6,ES7,ES8** <br>

**1. Using Promise**<br>

promise is pending because there is no resolve function.
```javascript
const promiseTest = new Promise((resolve, reject) => {});

console.log(promiseTest);
//result : Promise {<pending>}
```

**Promise - resolve**<br>
resolve helps to finish the promise
```javascript
const promiseTest = new Promise((resolve, reject) => {
  setTimeout(resolve, 3000, "This is PromistTest");
});

console.log(promiseTest);

setInterval(console.log, 1000, promiseTest);
//result : Promise {<pending>}
//result : Promise {<pending>}
//result : Promise {<pending>}
//result : Promise {<resolved> : "This is PromistTest"}    
//result : Promise {<resolved> : "This is PromistTest"}    
//result : Promise {<resolved> : "This is PromistTest"}    
//result : Promise {<resolved> : "This is PromistTest"}    
```

**Promise - then**
```javascript
const promiseTest = new Promise((resolve, reject) => {
  setTimeout(resolve, 3000, "This is PromistTest");
});

promiseTest.then(value => console.log(value));
//value in then have return value of resolve.
```

same code as above..
```javascript
const promiseTest = new Promise((resolve, reject) => {
  resolve("This is PromistTest");
});

const thenFn = value => console.log(value);
promistTest.then(thenFn);
```
**Promise - reject**
```javascript
const promiseTest = new Promise((resolve, reject) => {
  setTimeout(reject, 3000, "This is PromistTest-Reject");
});

promiseTest
  .then(result => console.log(result))
  .catch(error => console.log(error));
//if promise return error using "reject", .catch will run 
```

**Chaining Promises**
```javascript
const promiseTest = new Promise((resolve, reject) => {
  resolve(2);
});

promiseTest
.then(number => { number * 2;
})
.then(otherNumber => {
  console.log(otherNumber * 2);
})
//we can add .then as much as you can.
```

**Promise.all**<br>
Promise.all wait till all promise will be done.<br>
one of promise is rejected, motherPromise also will be rejected.<br>

```javascript
const p1 = new Promise(resolve => {
  setTimeout(resolve, 5000, "First");
});

const p2 = new Promise(resolve => {
  setTimeout(resolve, 1000, "Second");
});

const p3 = new Promise(resolve => {
  setTimeout(resolve, 3000, "Third");
})

const motherPromise = Promise.all([p1, p2, p3]);
motherPromise.then(values => console.log(values));

//result: (3)["First", "Second", "Third"]
```
**Promise.race**<br>
Promise.race is similar with Promise.all<br>
but Promise.race is okay if one of Promise is resolved or rejected.<br>
fastest promise take motherPromise and will return.<br>
```javascript
const p1 = new Promise(resolve => {
  setTimeout(resolve, 5000, "First");
});

const p2 = new Promise(resolve => {
  setTimeout(resolve, 1000, "Second");
});

const p3 = new Promise(resolve => {
  setTimeout(resolve, 3000, "Third");
})

const motherPromise = Promise.all([p1, p2, p3]);
motherPromise
  .then(values => console.log(values));
  .catch(err => console.log(err));
```


**.finally**<br>
Finally is running regardless of the result(resolved or rejected)
```javascript
const p1 = new Promise(resolve => {
  setTimeout(resolve, 5000, "First");
});
  .then(value => console.log(value))
  .catch(e => console.log(e))
  .finally(() => console.log("I am done"));
```