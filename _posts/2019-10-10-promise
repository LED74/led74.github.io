---
layout: post
title: "Promise"
subtitle: "Promise"
categories: Programming
tags: Javascript
---

# **Javascript ES6,ES7,ES8** <br>

**1. Using Promise**<br>

promise is pending because there is no resolve function.
```javascript
const promiseTest = new Promise((resolve, reject) => {});

console.log(promiseTest);
//result : Promise {<pending>}
```

**Promise - resolve**<br>
resolve helps to finish the promise
```javascript
const promiseTest = new Promise((resolve, reject) => {
  setTimeout(resolve, 3000, "This is PromistTest");
});

console.log(promiseTest);

setInterval(console.log, 1000, promiseTest);
//result : Promise {<pending>}
//result : Promise {<pending>}
//result : Promise {<pending>}
//result : Promise {<resolved> : "This is PromistTest"}    
//result : Promise {<resolved> : "This is PromistTest"}    
//result : Promise {<resolved> : "This is PromistTest"}    
//result : Promise {<resolved> : "This is PromistTest"}    
```

**Promise - then**
```javascript
const promiseTest = new Promise((resolve, reject) => {
  setTimeout(resolve, 3000, "This is PromistTest");
});

promiseTest.then(value => console.log(value));
//value in then have return value of resolve.
```

same code as above..
```javascript
const promiseTest = new Promise((resolve, reject) => {
  resolve("This is PromistTest");
});

const thenFn = value => console.log(value);
promistTest.then(thenFn);
```
**Promise - reject**
```javascript
const promiseTest = new Promise((resolve, reject) => {
  setTimeout(reject, 3000, "This is PromistTest-Reject");
});

promiseTest
  .then(result => console.log(result))
  .catch(error => console.log(error));
//if promise return error using "reject", .catch will run 
```